// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt
} from "@graphprotocol/graph-ts";

export class AcceptOffer extends ethereum.Event {
  get params(): AcceptOffer__Params {
    return new AcceptOffer__Params(this);
  }
}

export class AcceptOffer__Params {
  _event: AcceptOffer;

  constructor(event: AcceptOffer) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerBy(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class BuyNFT extends ethereum.Event {
  get params(): BuyNFT__Params {
    return new BuyNFT__Params(this);
  }
}

export class BuyNFT__Params {
  _event: BuyNFT;

  constructor(event: BuyNFT) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerBy(): Address {
    return this._event.parameters[4].value.toAddress();
  }
}

export class CreateOffer extends ethereum.Event {
  get params(): CreateOffer__Params {
    return new CreateOffer__Params(this);
  }
}

export class CreateOffer__Params {
  _event: CreateOffer;

  constructor(event: CreateOffer) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get offerAmount(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }

  get totalOffers(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get startAt(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get offerBy(): Address {
    return this._event.parameters[6].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[7].value.toI32();
  }
}

export class FallbackCalled extends ethereum.Event {
  get params(): FallbackCalled__Params {
    return new FallbackCalled__Params(this);
  }
}

export class FallbackCalled__Params {
  _event: FallbackCalled;

  constructor(event: FallbackCalled) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class MarketItemCreated extends ethereum.Event {
  get params(): MarketItemCreated__Params {
    return new MarketItemCreated__Params(this);
  }
}

export class MarketItemCreated__Params {
  _event: MarketItemCreated;

  constructor(event: MarketItemCreated) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get buyer(): Address {
    return this._event.parameters[3].value.toAddress();
  }

  get minPrice(): BigInt {
    return this._event.parameters[4].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._event.parameters[5].value.toBigInt();
  }

  get isFixedPrice(): boolean {
    return this._event.parameters[6].value.toBoolean();
  }

  get startAt(): BigInt {
    return this._event.parameters[7].value.toBigInt();
  }

  get expiresAt(): BigInt {
    return this._event.parameters[8].value.toBigInt();
  }

  get state(): i32 {
    return this._event.parameters[9].value.toI32();
  }
}

export class MarketItemDelete extends ethereum.Event {
  get params(): MarketItemDelete__Params {
    return new MarketItemDelete__Params(this);
  }
}

export class MarketItemDelete__Params {
  _event: MarketItemDelete;

  constructor(event: MarketItemDelete) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get seller(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get state(): i32 {
    return this._event.parameters[3].value.toI32();
  }
}

export class ReceivedCalled extends ethereum.Event {
  get params(): ReceivedCalled__Params {
    return new ReceivedCalled__Params(this);
  }
}

export class ReceivedCalled__Params {
  _event: ReceivedCalled;

  constructor(event: ReceivedCalled) {
    this._event = event;
  }

  get buyer(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RejectOffer extends ethereum.Event {
  get params(): RejectOffer__Params {
    return new RejectOffer__Params(this);
  }
}

export class RejectOffer__Params {
  _event: RejectOffer;

  constructor(event: RejectOffer) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get owner(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get contractAddress(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get offerAmount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }

  get offerBy(): Address {
    return this._event.parameters[4].value.toAddress();
  }

  get status(): i32 {
    return this._event.parameters[5].value.toI32();
  }
}

export class WithDrawAmount extends ethereum.Event {
  get params(): WithDrawAmount__Params {
    return new WithDrawAmount__Params(this);
  }
}

export class WithDrawAmount__Params {
  _event: WithDrawAmount;

  constructor(event: WithDrawAmount) {
    this._event = event;
  }

  get offerBy(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class WithDrawFromOffer extends ethereum.Event {
  get params(): WithDrawFromOffer__Params {
    return new WithDrawFromOffer__Params(this);
  }
}

export class WithDrawFromOffer__Params {
  _event: WithDrawFromOffer;

  constructor(event: WithDrawFromOffer) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get offerAmount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }

  get offerBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }
}

export class WithDrawRefundAmount extends ethereum.Event {
  get params(): WithDrawRefundAmount__Params {
    return new WithDrawRefundAmount__Params(this);
  }
}

export class WithDrawRefundAmount__Params {
  _event: WithDrawRefundAmount;

  constructor(event: WithDrawRefundAmount) {
    this._event = event;
  }

  get tokenId(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get contractAddress(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get offerBy(): Address {
    return this._event.parameters[2].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[3].value.toBigInt();
  }
}

export class PTNFTMarketPlace__getMarketItemResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get seller(): Address {
    return this[1].toAddress();
  }

  get buyer(): Address {
    return this[2].toAddress();
  }

  get minPrice(): BigInt {
    return this[3].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[4].toBigInt();
  }

  get isFixedPrice(): boolean {
    return this[5].toBoolean();
  }

  get startAt(): BigInt {
    return this[6].toBigInt();
  }

  get expiresAt(): BigInt {
    return this[7].toBigInt();
  }

  get state(): i32 {
    return this[8].toI32();
  }
}

export class PTNFTMarketPlace__getMarketOfferResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get offerAmount(): BigInt {
    return this[1].toBigInt();
  }

  get totalOffers(): BigInt {
    return this[2].toBigInt();
  }

  get startAt(): BigInt {
    return this[3].toBigInt();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }

  get offerBy(): Address {
    return this[5].toAddress();
  }

  get status(): i32 {
    return this[6].toI32();
  }
}

export class PTNFTMarketPlace__getOfferResultValue0Struct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get offerAmount(): BigInt {
    return this[1].toBigInt();
  }

  get totalOffers(): BigInt {
    return this[2].toBigInt();
  }

  get startAt(): BigInt {
    return this[3].toBigInt();
  }

  get expiresAt(): BigInt {
    return this[4].toBigInt();
  }

  get offerBy(): Address {
    return this[5].toAddress();
  }

  get status(): i32 {
    return this[6].toI32();
  }
}

export class PTNFTMarketPlace__s_marketItemsResult {
  value0: BigInt;
  value1: Address;
  value2: Address;
  value3: BigInt;
  value4: BigInt;
  value5: boolean;
  value6: BigInt;
  value7: BigInt;
  value8: i32;

  constructor(
    value0: BigInt,
    value1: Address,
    value2: Address,
    value3: BigInt,
    value4: BigInt,
    value5: boolean,
    value6: BigInt,
    value7: BigInt,
    value8: i32
  ) {
    this.value0 = value0;
    this.value1 = value1;
    this.value2 = value2;
    this.value3 = value3;
    this.value4 = value4;
    this.value5 = value5;
    this.value6 = value6;
    this.value7 = value7;
    this.value8 = value8;
  }

  toMap(): TypedMap<string, ethereum.Value> {
    let map = new TypedMap<string, ethereum.Value>();
    map.set("value0", ethereum.Value.fromUnsignedBigInt(this.value0));
    map.set("value1", ethereum.Value.fromAddress(this.value1));
    map.set("value2", ethereum.Value.fromAddress(this.value2));
    map.set("value3", ethereum.Value.fromUnsignedBigInt(this.value3));
    map.set("value4", ethereum.Value.fromUnsignedBigInt(this.value4));
    map.set("value5", ethereum.Value.fromBoolean(this.value5));
    map.set("value6", ethereum.Value.fromUnsignedBigInt(this.value6));
    map.set("value7", ethereum.Value.fromUnsignedBigInt(this.value7));
    map.set(
      "value8",
      ethereum.Value.fromUnsignedBigInt(BigInt.fromI32(this.value8))
    );
    return map;
  }

  getTokenId(): BigInt {
    return this.value0;
  }

  getSeller(): Address {
    return this.value1;
  }

  getBuyer(): Address {
    return this.value2;
  }

  getMinPrice(): BigInt {
    return this.value3;
  }

  getMaxPrice(): BigInt {
    return this.value4;
  }

  getIsFixedPrice(): boolean {
    return this.value5;
  }

  getStartAt(): BigInt {
    return this.value6;
  }

  getExpiresAt(): BigInt {
    return this.value7;
  }

  getState(): i32 {
    return this.value8;
  }
}

export class PTNFTMarketPlace extends ethereum.SmartContract {
  static bind(address: Address): PTNFTMarketPlace {
    return new PTNFTMarketPlace("PTNFTMarketPlace", address);
  }

  getContractBlanace(): BigInt {
    let result = super.call(
      "getContractBlanace",
      "getContractBlanace():(uint256)",
      []
    );

    return result[0].toBigInt();
  }

  try_getContractBlanace(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getContractBlanace",
      "getContractBlanace():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getItemCounter(): BigInt {
    let result = super.call("getItemCounter", "getItemCounter():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getItemCounter(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getItemCounter",
      "getItemCounter():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getListingFee(): BigInt {
    let result = super.call("getListingFee", "getListingFee():(uint256)", []);

    return result[0].toBigInt();
  }

  try_getListingFee(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getListingFee",
      "getListingFee():(uint256)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getMarketItem(
    nftAddress: Address,
    tokenId: BigInt
  ): PTNFTMarketPlace__getMarketItemResultValue0Struct {
    let result = super.call(
      "getMarketItem",
      "getMarketItem(address,uint256):((uint256,address,address,uint256,uint256,bool,uint256,uint256,uint8))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );

    return changetype<PTNFTMarketPlace__getMarketItemResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarketItem(
    nftAddress: Address,
    tokenId: BigInt
  ): ethereum.CallResult<PTNFTMarketPlace__getMarketItemResultValue0Struct> {
    let result = super.tryCall(
      "getMarketItem",
      "getMarketItem(address,uint256):((uint256,address,address,uint256,uint256,bool,uint256,uint256,uint8))",
      [
        ethereum.Value.fromAddress(nftAddress),
        ethereum.Value.fromUnsignedBigInt(tokenId)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PTNFTMarketPlace__getMarketItemResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMarketOffer(
    tokenId: BigInt
  ): PTNFTMarketPlace__getMarketOfferResultValue0Struct {
    let result = super.call(
      "getMarketOffer",
      "getMarketOffer(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<PTNFTMarketPlace__getMarketOfferResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getMarketOffer(
    tokenId: BigInt
  ): ethereum.CallResult<PTNFTMarketPlace__getMarketOfferResultValue0Struct> {
    let result = super.tryCall(
      "getMarketOffer",
      "getMarketOffer(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PTNFTMarketPlace__getMarketOfferResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getMarketowner(): Address {
    let result = super.call("getMarketowner", "getMarketowner():(address)", []);

    return result[0].toAddress();
  }

  try_getMarketowner(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getMarketowner",
      "getMarketowner():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getNftContractAddress(): Address {
    let result = super.call(
      "getNftContractAddress",
      "getNftContractAddress():(address)",
      []
    );

    return result[0].toAddress();
  }

  try_getNftContractAddress(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "getNftContractAddress",
      "getNftContractAddress():(address)",
      []
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  getOffer(tokenId: BigInt): PTNFTMarketPlace__getOfferResultValue0Struct {
    let result = super.call(
      "getOffer",
      "getOffer(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );

    return changetype<PTNFTMarketPlace__getOfferResultValue0Struct>(
      result[0].toTuple()
    );
  }

  try_getOffer(
    tokenId: BigInt
  ): ethereum.CallResult<PTNFTMarketPlace__getOfferResultValue0Struct> {
    let result = super.tryCall(
      "getOffer",
      "getOffer(uint256):((uint256,uint256,uint256,uint256,uint256,address,uint8))",
      [ethereum.Value.fromUnsignedBigInt(tokenId)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      changetype<PTNFTMarketPlace__getOfferResultValue0Struct>(
        value[0].toTuple()
      )
    );
  }

  getWithDrawAmounts(buyer: Address): BigInt {
    let result = super.call(
      "getWithDrawAmounts",
      "getWithDrawAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(buyer)]
    );

    return result[0].toBigInt();
  }

  try_getWithDrawAmounts(buyer: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getWithDrawAmounts",
      "getWithDrawAmounts(address):(uint256)",
      [ethereum.Value.fromAddress(buyer)]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  s_marketItems(
    param0: Address,
    param1: BigInt
  ): PTNFTMarketPlace__s_marketItemsResult {
    let result = super.call(
      "s_marketItems",
      "s_marketItems(address,uint256):(uint256,address,address,uint256,uint256,bool,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );

    return new PTNFTMarketPlace__s_marketItemsResult(
      result[0].toBigInt(),
      result[1].toAddress(),
      result[2].toAddress(),
      result[3].toBigInt(),
      result[4].toBigInt(),
      result[5].toBoolean(),
      result[6].toBigInt(),
      result[7].toBigInt(),
      result[8].toI32()
    );
  }

  try_s_marketItems(
    param0: Address,
    param1: BigInt
  ): ethereum.CallResult<PTNFTMarketPlace__s_marketItemsResult> {
    let result = super.tryCall(
      "s_marketItems",
      "s_marketItems(address,uint256):(uint256,address,address,uint256,uint256,bool,uint256,uint256,uint8)",
      [
        ethereum.Value.fromAddress(param0),
        ethereum.Value.fromUnsignedBigInt(param1)
      ]
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(
      new PTNFTMarketPlace__s_marketItemsResult(
        value[0].toBigInt(),
        value[1].toAddress(),
        value[2].toAddress(),
        value[3].toBigInt(),
        value[4].toBigInt(),
        value[5].toBoolean(),
        value[6].toBigInt(),
        value[7].toBigInt(),
        value[8].toI32()
      )
    );
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class DefaultCall extends ethereum.Call {
  get inputs(): DefaultCall__Inputs {
    return new DefaultCall__Inputs(this);
  }

  get outputs(): DefaultCall__Outputs {
    return new DefaultCall__Outputs(this);
  }
}

export class DefaultCall__Inputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class DefaultCall__Outputs {
  _call: DefaultCall;

  constructor(call: DefaultCall) {
    this._call = call;
  }
}

export class AcceptLazzNFTOfferCall extends ethereum.Call {
  get inputs(): AcceptLazzNFTOfferCall__Inputs {
    return new AcceptLazzNFTOfferCall__Inputs(this);
  }

  get outputs(): AcceptLazzNFTOfferCall__Outputs {
    return new AcceptLazzNFTOfferCall__Outputs(this);
  }
}

export class AcceptLazzNFTOfferCall__Inputs {
  _call: AcceptLazzNFTOfferCall;

  constructor(call: AcceptLazzNFTOfferCall) {
    this._call = call;
  }

  get voucher(): AcceptLazzNFTOfferCallVoucherStruct {
    return changetype<AcceptLazzNFTOfferCallVoucherStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class AcceptLazzNFTOfferCall__Outputs {
  _call: AcceptLazzNFTOfferCall;

  constructor(call: AcceptLazzNFTOfferCall) {
    this._call = call;
  }
}

export class AcceptLazzNFTOfferCallVoucherStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get minPrice(): BigInt {
    return this[1].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[2].toBigInt();
  }

  get uri(): string {
    return this[3].toString();
  }

  get signature(): Bytes {
    return this[4].toBytes();
  }
}

export class AcceptOfferCall extends ethereum.Call {
  get inputs(): AcceptOfferCall__Inputs {
    return new AcceptOfferCall__Inputs(this);
  }

  get outputs(): AcceptOfferCall__Outputs {
    return new AcceptOfferCall__Outputs(this);
  }
}

export class AcceptOfferCall__Inputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class AcceptOfferCall__Outputs {
  _call: AcceptOfferCall;

  constructor(call: AcceptOfferCall) {
    this._call = call;
  }
}

export class BuyCall extends ethereum.Call {
  get inputs(): BuyCall__Inputs {
    return new BuyCall__Inputs(this);
  }

  get outputs(): BuyCall__Outputs {
    return new BuyCall__Outputs(this);
  }
}

export class BuyCall__Inputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class BuyCall__Outputs {
  _call: BuyCall;

  constructor(call: BuyCall) {
    this._call = call;
  }
}

export class BuyLazzNFTCall extends ethereum.Call {
  get inputs(): BuyLazzNFTCall__Inputs {
    return new BuyLazzNFTCall__Inputs(this);
  }

  get outputs(): BuyLazzNFTCall__Outputs {
    return new BuyLazzNFTCall__Outputs(this);
  }
}

export class BuyLazzNFTCall__Inputs {
  _call: BuyLazzNFTCall;

  constructor(call: BuyLazzNFTCall) {
    this._call = call;
  }

  get voucher(): BuyLazzNFTCallVoucherStruct {
    return changetype<BuyLazzNFTCallVoucherStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class BuyLazzNFTCall__Outputs {
  _call: BuyLazzNFTCall;

  constructor(call: BuyLazzNFTCall) {
    this._call = call;
  }
}

export class BuyLazzNFTCallVoucherStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get minPrice(): BigInt {
    return this[1].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[2].toBigInt();
  }

  get uri(): string {
    return this[3].toString();
  }

  get signature(): Bytes {
    return this[4].toBytes();
  }
}

export class CreateMarketItemCall extends ethereum.Call {
  get inputs(): CreateMarketItemCall__Inputs {
    return new CreateMarketItemCall__Inputs(this);
  }

  get outputs(): CreateMarketItemCall__Outputs {
    return new CreateMarketItemCall__Outputs(this);
  }
}

export class CreateMarketItemCall__Inputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get minPrice(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get maxPrice(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get isFixedPrice(): boolean {
    return this._call.inputValues[3].value.toBoolean();
  }

  get expiresAt(): BigInt {
    return this._call.inputValues[4].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[5].value.toAddress();
  }
}

export class CreateMarketItemCall__Outputs {
  _call: CreateMarketItemCall;

  constructor(call: CreateMarketItemCall) {
    this._call = call;
  }
}

export class CreateOfferCall extends ethereum.Call {
  get inputs(): CreateOfferCall__Inputs {
    return new CreateOfferCall__Inputs(this);
  }

  get outputs(): CreateOfferCall__Outputs {
    return new CreateOfferCall__Outputs(this);
  }
}

export class CreateOfferCall__Inputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }

  get itemId(): i32 {
    return this._call.inputValues[0].value.toI32();
  }

  get numberOfDays(): i32 {
    return this._call.inputValues[1].value.toI32();
  }

  get nftAddress(): Address {
    return this._call.inputValues[2].value.toAddress();
  }
}

export class CreateOfferCall__Outputs {
  _call: CreateOfferCall;

  constructor(call: CreateOfferCall) {
    this._call = call;
  }
}

export class CreateOfferFoRLazzNFTCall extends ethereum.Call {
  get inputs(): CreateOfferFoRLazzNFTCall__Inputs {
    return new CreateOfferFoRLazzNFTCall__Inputs(this);
  }

  get outputs(): CreateOfferFoRLazzNFTCall__Outputs {
    return new CreateOfferFoRLazzNFTCall__Outputs(this);
  }
}

export class CreateOfferFoRLazzNFTCall__Inputs {
  _call: CreateOfferFoRLazzNFTCall;

  constructor(call: CreateOfferFoRLazzNFTCall) {
    this._call = call;
  }

  get voucher(): CreateOfferFoRLazzNFTCallVoucherStruct {
    return changetype<CreateOfferFoRLazzNFTCallVoucherStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }

  get numberOfDays(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class CreateOfferFoRLazzNFTCall__Outputs {
  _call: CreateOfferFoRLazzNFTCall;

  constructor(call: CreateOfferFoRLazzNFTCall) {
    this._call = call;
  }
}

export class CreateOfferFoRLazzNFTCallVoucherStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get minPrice(): BigInt {
    return this[1].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[2].toBigInt();
  }

  get uri(): string {
    return this[3].toString();
  }

  get signature(): Bytes {
    return this[4].toBytes();
  }
}

export class DeleteMarketItemCall extends ethereum.Call {
  get inputs(): DeleteMarketItemCall__Inputs {
    return new DeleteMarketItemCall__Inputs(this);
  }

  get outputs(): DeleteMarketItemCall__Outputs {
    return new DeleteMarketItemCall__Outputs(this);
  }
}

export class DeleteMarketItemCall__Inputs {
  _call: DeleteMarketItemCall;

  constructor(call: DeleteMarketItemCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class DeleteMarketItemCall__Outputs {
  _call: DeleteMarketItemCall;

  constructor(call: DeleteMarketItemCall) {
    this._call = call;
  }
}

export class RejectLazzNFTOfferCall extends ethereum.Call {
  get inputs(): RejectLazzNFTOfferCall__Inputs {
    return new RejectLazzNFTOfferCall__Inputs(this);
  }

  get outputs(): RejectLazzNFTOfferCall__Outputs {
    return new RejectLazzNFTOfferCall__Outputs(this);
  }
}

export class RejectLazzNFTOfferCall__Inputs {
  _call: RejectLazzNFTOfferCall;

  constructor(call: RejectLazzNFTOfferCall) {
    this._call = call;
  }

  get voucher(): RejectLazzNFTOfferCallVoucherStruct {
    return changetype<RejectLazzNFTOfferCallVoucherStruct>(
      this._call.inputValues[0].value.toTuple()
    );
  }
}

export class RejectLazzNFTOfferCall__Outputs {
  _call: RejectLazzNFTOfferCall;

  constructor(call: RejectLazzNFTOfferCall) {
    this._call = call;
  }
}

export class RejectLazzNFTOfferCallVoucherStruct extends ethereum.Tuple {
  get tokenId(): BigInt {
    return this[0].toBigInt();
  }

  get minPrice(): BigInt {
    return this[1].toBigInt();
  }

  get maxPrice(): BigInt {
    return this[2].toBigInt();
  }

  get uri(): string {
    return this[3].toString();
  }

  get signature(): Bytes {
    return this[4].toBytes();
  }
}

export class RejectOfferCall extends ethereum.Call {
  get inputs(): RejectOfferCall__Inputs {
    return new RejectOfferCall__Inputs(this);
  }

  get outputs(): RejectOfferCall__Outputs {
    return new RejectOfferCall__Outputs(this);
  }
}

export class RejectOfferCall__Inputs {
  _call: RejectOfferCall;

  constructor(call: RejectOfferCall) {
    this._call = call;
  }

  get itemId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get nftAddress(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RejectOfferCall__Outputs {
  _call: RejectOfferCall;

  constructor(call: RejectOfferCall) {
    this._call = call;
  }
}

export class SetNftContractAddressCall extends ethereum.Call {
  get inputs(): SetNftContractAddressCall__Inputs {
    return new SetNftContractAddressCall__Inputs(this);
  }

  get outputs(): SetNftContractAddressCall__Outputs {
    return new SetNftContractAddressCall__Outputs(this);
  }
}

export class SetNftContractAddressCall__Inputs {
  _call: SetNftContractAddressCall;

  constructor(call: SetNftContractAddressCall) {
    this._call = call;
  }

  get nftContractAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class SetNftContractAddressCall__Outputs {
  _call: SetNftContractAddressCall;

  constructor(call: SetNftContractAddressCall) {
    this._call = call;
  }
}

export class SetlistingFeeCall extends ethereum.Call {
  get inputs(): SetlistingFeeCall__Inputs {
    return new SetlistingFeeCall__Inputs(this);
  }

  get outputs(): SetlistingFeeCall__Outputs {
    return new SetlistingFeeCall__Outputs(this);
  }
}

export class SetlistingFeeCall__Inputs {
  _call: SetlistingFeeCall;

  constructor(call: SetlistingFeeCall) {
    this._call = call;
  }

  get listingFee(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class SetlistingFeeCall__Outputs {
  _call: SetlistingFeeCall;

  constructor(call: SetlistingFeeCall) {
    this._call = call;
  }
}

export class WithDrawAmountCall extends ethereum.Call {
  get inputs(): WithDrawAmountCall__Inputs {
    return new WithDrawAmountCall__Inputs(this);
  }

  get outputs(): WithDrawAmountCall__Outputs {
    return new WithDrawAmountCall__Outputs(this);
  }
}

export class WithDrawAmountCall__Inputs {
  _call: WithDrawAmountCall;

  constructor(call: WithDrawAmountCall) {
    this._call = call;
  }
}

export class WithDrawAmountCall__Outputs {
  _call: WithDrawAmountCall;

  constructor(call: WithDrawAmountCall) {
    this._call = call;
  }
}

export class WithDrawFromOfferCall extends ethereum.Call {
  get inputs(): WithDrawFromOfferCall__Inputs {
    return new WithDrawFromOfferCall__Inputs(this);
  }

  get outputs(): WithDrawFromOfferCall__Outputs {
    return new WithDrawFromOfferCall__Outputs(this);
  }
}

export class WithDrawFromOfferCall__Inputs {
  _call: WithDrawFromOfferCall;

  constructor(call: WithDrawFromOfferCall) {
    this._call = call;
  }

  get tokenId(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithDrawFromOfferCall__Outputs {
  _call: WithDrawFromOfferCall;

  constructor(call: WithDrawFromOfferCall) {
    this._call = call;
  }
}
