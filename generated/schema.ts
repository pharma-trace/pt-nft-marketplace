// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class ItemListedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemListedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemListedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemListedEntity", id.toString(), this);
    }
  }

  static load(id: string): ItemListedEntity | null {
    return changetype<ItemListedEntity | null>(
      store.get("ItemListedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get seller(): string {
    let value = this.get("seller");
    return value!.toString();
  }

  set seller(value: string) {
    this.set("seller", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get minPrice(): BigInt {
    let value = this.get("minPrice");
    return value!.toBigInt();
  }

  set minPrice(value: BigInt) {
    this.set("minPrice", Value.fromBigInt(value));
  }

  get expiry(): BigInt {
    let value = this.get("expiry");
    return value!.toBigInt();
  }

  set expiry(value: BigInt) {
    this.set("expiry", Value.fromBigInt(value));
  }

  get isFixedPrice(): boolean {
    let value = this.get("isFixedPrice");
    return value!.toBoolean();
  }

  set isFixedPrice(value: boolean) {
    this.set("isFixedPrice", Value.fromBoolean(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class TradeExecutedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save TradeExecutedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type TradeExecutedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("TradeExecutedEntity", id.toString(), this);
    }
  }

  static load(id: string): TradeExecutedEntity | null {
    return changetype<TradeExecutedEntity | null>(
      store.get("TradeExecutedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get seller(): Bytes {
    let value = this.get("seller");
    return value!.toBytes();
  }

  set seller(value: Bytes) {
    this.set("seller", Value.fromBytes(value));
  }

  get buyer(): Bytes {
    let value = this.get("buyer");
    return value!.toBytes();
  }

  set buyer(value: Bytes) {
    this.set("buyer", Value.fromBytes(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get price(): BigInt {
    let value = this.get("price");
    return value!.toBigInt();
  }

  set price(value: BigInt) {
    this.set("price", Value.fromBigInt(value));
  }

  get isVoucher(): boolean {
    let value = this.get("isVoucher");
    return value!.toBoolean();
  }

  set isVoucher(value: boolean) {
    this.set("isVoucher", Value.fromBoolean(value));
  }
}

export class VoucherWrittenEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save VoucherWrittenEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type VoucherWrittenEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("VoucherWrittenEntity", id.toString(), this);
    }
  }

  static load(id: string): VoucherWrittenEntity | null {
    return changetype<VoucherWrittenEntity | null>(
      store.get("VoucherWrittenEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get uri(): string {
    let value = this.get("uri");
    return value!.toString();
  }

  set uri(value: string) {
    this.set("uri", Value.fromString(value));
  }

  get currency(): Bytes {
    let value = this.get("currency");
    return value!.toBytes();
  }

  set currency(value: Bytes) {
    this.set("currency", Value.fromBytes(value));
  }

  get signature(): Bytes {
    let value = this.get("signature");
    return value!.toBytes();
  }

  set signature(value: Bytes) {
    this.set("signature", Value.fromBytes(value));
  }
}

export class CollectionWhitelistedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CollectionWhitelistedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CollectionWhitelistedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CollectionWhitelistedEntity", id.toString(), this);
    }
  }

  static load(id: string): CollectionWhitelistedEntity | null {
    return changetype<CollectionWhitelistedEntity | null>(
      store.get("CollectionWhitelistedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes {
    let value = this.get("collection");
    return value!.toBytes();
  }

  set collection(value: Bytes) {
    this.set("collection", Value.fromBytes(value));
  }
}

export class CurrencyWhitelistedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save CurrencyWhitelistedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type CurrencyWhitelistedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("CurrencyWhitelistedEntity", id.toString(), this);
    }
  }

  static load(id: string): CurrencyWhitelistedEntity | null {
    return changetype<CurrencyWhitelistedEntity | null>(
      store.get("CurrencyWhitelistedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get addOrRemove(): boolean {
    let value = this.get("addOrRemove");
    return value!.toBoolean();
  }

  set addOrRemove(value: boolean) {
    this.set("addOrRemove", Value.fromBoolean(value));
  }
}

export class ItemBoughtEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save ItemBoughtEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type ItemBoughtEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("ItemBoughtEntity", id.toString(), this);
    }
  }

  static load(id: string): ItemBoughtEntity | null {
    return changetype<ItemBoughtEntity | null>(
      store.get("ItemBoughtEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get isVoucher(): boolean {
    let value = this.get("isVoucher");
    return value!.toBoolean();
  }

  set isVoucher(value: boolean) {
    this.set("isVoucher", Value.fromBoolean(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class OfferCreatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferCreatedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferCreatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferCreatedEntity", id.toString(), this);
    }
  }

  static load(id: string): OfferCreatedEntity | null {
    return changetype<OfferCreatedEntity | null>(
      store.get("OfferCreatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get offerPrice(): BigInt {
    let value = this.get("offerPrice");
    return value!.toBigInt();
  }

  set offerPrice(value: BigInt) {
    this.set("offerPrice", Value.fromBigInt(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get isVoucher(): boolean {
    let value = this.get("isVoucher");
    return value!.toBoolean();
  }

  set isVoucher(value: boolean) {
    this.set("isVoucher", Value.fromBoolean(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class FeePercentUpadatedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(
      id != null,
      "Cannot save FeePercentUpadatedEntity entity without an ID"
    );
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type FeePercentUpadatedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("FeePercentUpadatedEntity", id.toString(), this);
    }
  }

  static load(id: string): FeePercentUpadatedEntity | null {
    return changetype<FeePercentUpadatedEntity | null>(
      store.get("FeePercentUpadatedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get newFeePercent(): BigInt {
    let value = this.get("newFeePercent");
    return value!.toBigInt();
  }

  set newFeePercent(value: BigInt) {
    this.set("newFeePercent", Value.fromBigInt(value));
  }
}

export class OfferAcceptedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferAcceptedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferAcceptedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferAcceptedEntity", id.toString(), this);
    }
  }

  static load(id: string): OfferAcceptedEntity | null {
    return changetype<OfferAcceptedEntity | null>(
      store.get("OfferAcceptedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }
}

export class OfferRejectedEntity extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save OfferRejectedEntity entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type OfferRejectedEntity must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("OfferRejectedEntity", id.toString(), this);
    }
  }

  static load(id: string): OfferRejectedEntity | null {
    return changetype<OfferRejectedEntity | null>(
      store.get("OfferRejectedEntity", id)
    );
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }

  get collection(): Bytes | null {
    let value = this.get("collection");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set collection(value: Bytes | null) {
    if (!value) {
      this.unset("collection");
    } else {
      this.set("collection", Value.fromBytes(<Bytes>value));
    }
  }

  get tokenId(): BigInt {
    let value = this.get("tokenId");
    return value!.toBigInt();
  }

  set tokenId(value: BigInt) {
    this.set("tokenId", Value.fromBigInt(value));
  }

  get buyer(): string {
    let value = this.get("buyer");
    return value!.toString();
  }

  set buyer(value: string) {
    this.set("buyer", Value.fromString(value));
  }

  get status(): boolean {
    let value = this.get("status");
    return value!.toBoolean();
  }

  set status(value: boolean) {
    this.set("status", Value.fromBoolean(value));
  }
}

export class User extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type User must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`
      );
      store.set("User", id.toString(), this);
    }
  }

  static load(id: string): User | null {
    return changetype<User | null>(store.get("User", id));
  }

  get id(): string {
    let value = this.get("id");
    return value!.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get userAddress(): Bytes {
    let value = this.get("userAddress");
    return value!.toBytes();
  }

  set userAddress(value: Bytes) {
    this.set("userAddress", Value.fromBytes(value));
  }

  get nftOwne(): Array<string> | null {
    let value = this.get("nftOwne");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set nftOwne(value: Array<string> | null) {
    if (!value) {
      this.unset("nftOwne");
    } else {
      this.set("nftOwne", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offerAccepted(): Array<string> | null {
    let value = this.get("offerAccepted");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offerAccepted(value: Array<string> | null) {
    if (!value) {
      this.unset("offerAccepted");
    } else {
      this.set("offerAccepted", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offerRecjected(): Array<string> | null {
    let value = this.get("offerRecjected");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offerRecjected(value: Array<string> | null) {
    if (!value) {
      this.unset("offerRecjected");
    } else {
      this.set("offerRecjected", Value.fromStringArray(<Array<string>>value));
    }
  }

  get offerCreated(): Array<string> | null {
    let value = this.get("offerCreated");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set offerCreated(value: Array<string> | null) {
    if (!value) {
      this.unset("offerCreated");
    } else {
      this.set("offerCreated", Value.fromStringArray(<Array<string>>value));
    }
  }

  get itemListed(): Array<string> | null {
    let value = this.get("itemListed");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toStringArray();
    }
  }

  set itemListed(value: Array<string> | null) {
    if (!value) {
      this.unset("itemListed");
    } else {
      this.set("itemListed", Value.fromStringArray(<Array<string>>value));
    }
  }

  get ts(): BigInt {
    let value = this.get("ts");
    return value!.toBigInt();
  }

  set ts(value: BigInt) {
    this.set("ts", Value.fromBigInt(value));
  }
}
